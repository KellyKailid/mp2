{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://pokeapi.co/api/v2';\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000\n});\n\n// Cache for Pokemon data to avoid repeated API calls\nconst pokemonCache = new Map();\nconst listCache = new Map();\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit = 151, offset = 0) {\n    const cacheKey = `list-${limit}-${offset}`;\n    if (listCache.has(cacheKey)) {\n      return listCache.get(cacheKey);\n    }\n    try {\n      const response = await api.get(`/pokemon?limit=${limit}&offset=${offset}`);\n      listCache.set(cacheKey, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw new Error('Failed to fetch Pokemon list');\n    }\n  },\n  // Get detailed Pokemon data by ID or name\n  async getPokemon(idOrName) {\n    const id = typeof idOrName === 'string' ? parseInt(idOrName) : idOrName;\n    if (pokemonCache.has(id)) {\n      return pokemonCache.get(id);\n    }\n    try {\n      const response = await api.get(`/pokemon/${idOrName}`);\n      pokemonCache.set(id, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${idOrName}:`, error);\n      throw new Error(`Failed to fetch Pokemon ${idOrName}`);\n    }\n  },\n  // Get Pokemon types for filtering\n  async getPokemonTypes() {\n    try {\n      const response = await api.get('/type');\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw new Error('Failed to fetch Pokemon types');\n    }\n  },\n  // Search Pokemon by name\n  async searchPokemon(query) {\n    try {\n      // Get all Pokemon and filter by name\n      const response = await api.get('/pokemon?limit=151&offset=0');\n      return response.data.results.filter(pokemon => pokemon.name.toLowerCase().includes(query.toLowerCase()));\n    } catch (error) {\n      console.error('Error searching Pokemon:', error);\n      throw new Error('Failed to search Pokemon');\n    }\n  }\n};\nexport default pokemonApi;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","timeout","pokemonCache","Map","listCache","pokemonApi","getPokemonList","limit","offset","cacheKey","has","get","response","set","data","error","console","Error","getPokemon","idOrName","id","parseInt","getPokemonTypes","results","searchPokemon","query","filter","pokemon","name","toLowerCase","includes"],"sources":["/Users/daijingyu/Desktop/mp2/src/services/pokemonApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { Pokemon, PokemonListResponse, PokemonListItem } from '../types/Pokemon';\n\nconst BASE_URL = 'https://pokeapi.co/api/v2';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n});\n\n// Cache for Pokemon data to avoid repeated API calls\nconst pokemonCache = new Map<number, Pokemon>();\nconst listCache = new Map<string, PokemonListResponse>();\n\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit: number = 151, offset: number = 0): Promise<PokemonListResponse> {\n    const cacheKey = `list-${limit}-${offset}`;\n    \n    if (listCache.has(cacheKey)) {\n      return listCache.get(cacheKey)!;\n    }\n\n    try {\n      const response = await api.get<PokemonListResponse>(`/pokemon?limit=${limit}&offset=${offset}`);\n      listCache.set(cacheKey, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw new Error('Failed to fetch Pokemon list');\n    }\n  },\n\n  // Get detailed Pokemon data by ID or name\n  async getPokemon(idOrName: number | string): Promise<Pokemon> {\n    const id = typeof idOrName === 'string' ? parseInt(idOrName) : idOrName;\n    \n    if (pokemonCache.has(id)) {\n      return pokemonCache.get(id)!;\n    }\n\n    try {\n      const response = await api.get<Pokemon>(`/pokemon/${idOrName}`);\n      pokemonCache.set(id, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${idOrName}:`, error);\n      throw new Error(`Failed to fetch Pokemon ${idOrName}`);\n    }\n  },\n\n  // Get Pokemon types for filtering\n  async getPokemonTypes(): Promise<{ name: string; url: string }[]> {\n    try {\n      const response = await api.get('/type');\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw new Error('Failed to fetch Pokemon types');\n    }\n  },\n\n  // Search Pokemon by name\n  async searchPokemon(query: string): Promise<PokemonListItem[]> {\n    try {\n      // Get all Pokemon and filter by name\n      const response = await api.get<PokemonListResponse>('/pokemon?limit=151&offset=0');\n      return response.data.results.filter(pokemon => \n        pokemon.name.toLowerCase().includes(query.toLowerCase())\n      );\n    } catch (error) {\n      console.error('Error searching Pokemon:', error);\n      throw new Error('Failed to search Pokemon');\n    }\n  }\n};\n\nexport default pokemonApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}