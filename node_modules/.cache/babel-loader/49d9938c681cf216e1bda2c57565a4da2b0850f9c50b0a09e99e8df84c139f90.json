{"ast":null,"code":"var _jsxFileName = \"/Users/daijingyu/Desktop/mp2/src/components/GalleryView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { pokemonApi } from '../services/pokemonApi';\nimport PokemonCard from './PokemonCard';\nimport './GalleryView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GalleryView = () => {\n  _s();\n  const [pokemonData, setPokemonData] = useState([]);\n  const [pokemonTypes, setPokemonTypes] = useState([]);\n  const [selectedTypes, setSelectedTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch Pokemon types\n        const typesResponse = await pokemonApi.getPokemonTypes();\n        setPokemonTypes(typesResponse.results);\n\n        // Fetch Pokemon data (first 50 for gallery)\n        const pokemonList = await pokemonApi.getAllPokemon(50);\n        const detailedData = await Promise.all(pokemonList.results.map(async pokemon => {\n          const id = pokemon.url.split('/').slice(-2, -1)[0];\n          return await pokemonApi.getPokemonById(id);\n        }));\n        setPokemonData(detailedData);\n      } catch (err) {\n        setError('Failed to fetch Pokemon data');\n        console.error('Error fetching Pokemon:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const filteredPokemon = useMemo(() => {\n    if (selectedTypes.length === 0) {\n      return pokemonData;\n    }\n    return pokemonData.filter(pokemon => pokemon.types.some(type => selectedTypes.includes(type.type.name)));\n  }, [pokemonData, selectedTypes]);\n  const handleTypeToggle = typeName => {\n    setSelectedTypes(prev => prev.includes(typeName) ? prev.filter(t => t !== typeName) : [...prev, typeName]);\n  };\n  const clearFilters = () => {\n    setSelectedTypes([]);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading Pokemon Gallery...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Filter by Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"type-filters\",\n        children: [pokemonTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `type-filter ${selectedTypes.includes(type.name) ? 'active' : ''}`,\n          onClick: () => handleTypeToggle(type.name),\n          children: type.name.charAt(0).toUpperCase() + type.name.slice(1)\n        }, type.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-filters\",\n          onClick: clearFilters,\n          children: \"Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-info\",\n        children: [\"Showing \", filteredPokemon.length, \" of \", pokemonData.length, \" Pokemon\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pokemon-gallery\",\n      children: filteredPokemon.map(pokemon => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/pokemon/${pokemon.id}`,\n        className: \"pokemon-link\",\n        children: /*#__PURE__*/_jsxDEV(PokemonCard, {\n          pokemon: pokemon,\n          showImage: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, pokemon.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), filteredPokemon.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-results\",\n      children: \"No Pokemon found with the selected types.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(GalleryView, \"s/GLdJPDQwpykGf3JmVeF5Mka24=\");\n_c = GalleryView;\nexport default GalleryView;\nvar _c;\n$RefreshReg$(_c, \"GalleryView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Link","pokemonApi","PokemonCard","jsxDEV","_jsxDEV","GalleryView","_s","pokemonData","setPokemonData","pokemonTypes","setPokemonTypes","selectedTypes","setSelectedTypes","loading","setLoading","error","setError","fetchData","typesResponse","getPokemonTypes","results","pokemonList","getAllPokemon","detailedData","Promise","all","map","pokemon","id","url","split","slice","getPokemonById","err","console","filteredPokemon","length","filter","types","some","type","includes","name","handleTypeToggle","typeName","prev","t","clearFilters","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","charAt","toUpperCase","to","showImage","_c","$RefreshReg$"],"sources":["/Users/daijingyu/Desktop/mp2/src/components/GalleryView.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { pokemonApi } from '../services/pokemonApi';\nimport { Pokemon, PokemonType } from '../types/Pokemon';\nimport PokemonCard from './PokemonCard';\nimport './GalleryView.css';\n\nconst GalleryView: React.FC = () => {\n  const [pokemonData, setPokemonData] = useState<Pokemon[]>([]);\n  const [pokemonTypes, setPokemonTypes] = useState<PokemonType[]>([]);\n  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch Pokemon types\n        const typesResponse = await pokemonApi.getPokemonTypes();\n        setPokemonTypes(typesResponse.results);\n\n        // Fetch Pokemon data (first 50 for gallery)\n        const pokemonList = await pokemonApi.getAllPokemon(50);\n        const detailedData = await Promise.all(\n          pokemonList.results.map(async (pokemon) => {\n            const id = pokemon.url.split('/').slice(-2, -1)[0];\n            return await pokemonApi.getPokemonById(id);\n          })\n        );\n        setPokemonData(detailedData);\n      } catch (err) {\n        setError('Failed to fetch Pokemon data');\n        console.error('Error fetching Pokemon:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredPokemon = useMemo(() => {\n    if (selectedTypes.length === 0) {\n      return pokemonData;\n    }\n\n    return pokemonData.filter(pokemon =>\n      pokemon.types.some(type => \n        selectedTypes.includes(type.type.name)\n      )\n    );\n  }, [pokemonData, selectedTypes]);\n\n  const handleTypeToggle = (typeName: string) => {\n    setSelectedTypes(prev => \n      prev.includes(typeName)\n        ? prev.filter(t => t !== typeName)\n        : [...prev, typeName]\n    );\n  };\n\n  const clearFilters = () => {\n    setSelectedTypes([]);\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading Pokemon Gallery...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"gallery-view\">\n      <div className=\"gallery-controls\">\n        <h2>Filter by Type</h2>\n        <div className=\"type-filters\">\n          {pokemonTypes.map((type) => (\n            <button\n              key={type.name}\n              className={`type-filter ${selectedTypes.includes(type.name) ? 'active' : ''}`}\n              onClick={() => handleTypeToggle(type.name)}\n            >\n              {type.name.charAt(0).toUpperCase() + type.name.slice(1)}\n            </button>\n          ))}\n          <button className=\"clear-filters\" onClick={clearFilters}>\n            Clear All\n          </button>\n        </div>\n        \n        <div className=\"filter-info\">\n          Showing {filteredPokemon.length} of {pokemonData.length} Pokemon\n        </div>\n      </div>\n\n      <div className=\"pokemon-gallery\">\n        {filteredPokemon.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemon/${pokemon.id}`} className=\"pokemon-link\">\n            <PokemonCard pokemon={pokemon} showImage={true} />\n          </Link>\n        ))}\n      </div>\n\n      {filteredPokemon.length === 0 && (\n        <div className=\"no-results\">\n          No Pokemon found with the selected types.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GalleryView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}