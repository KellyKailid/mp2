{"ast":null,"code":"import _objectSpread from\"/Users/daijingyu/Desktop/mp2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useMemo}from'react';import{Link}from'react-router-dom';import{pokemonApi}from'../services/pokemonApi';import LoadingSpinner from'./LoadingSpinner';import'./GalleryView.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GalleryView=()=>{const[pokemonList,setPokemonList]=useState([]);const[availableTypes,setAvailableTypes]=useState([]);const[selectedTypes,setSelectedTypes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchPokemon=async()=>{try{setLoading(true);setError(null);const response=await pokemonApi.getPokemonList(151,0);// Fetch detailed data for all Pokemon\nconst details=await Promise.all(response.results.map(async pokemon=>{const id=pokemon.url.split('/').slice(-2,-1)[0];return pokemonApi.getPokemon(parseInt(id));}));setPokemonList(details);// Extract unique types for filtering\nconst types=new Set();details.forEach(pokemon=>{pokemon.types.forEach(type=>{types.add(type.type.name);});});const sortedTypes=Array.from(types).sort();setAvailableTypes(sortedTypes);setSelectedTypes(sortedTypes.map(type=>({type,selected:false})));}catch(err){setError('Failed to load Pokemon data');console.error('Error fetching Pokemon:',err);}finally{setLoading(false);}};fetchPokemon();},[]);const filteredPokemon=useMemo(()=>{const activeFilters=selectedTypes.filter(filter=>filter.selected).map(filter=>filter.type);if(activeFilters.length===0){return pokemonList;}return pokemonList.filter(pokemon=>pokemon.types.some(type=>activeFilters.includes(type.type.name)));},[pokemonList,selectedTypes]);const handleTypeToggle=typeName=>{setSelectedTypes(prev=>prev.map(filter=>filter.type===typeName?_objectSpread(_objectSpread({},filter),{},{selected:!filter.selected}):filter));};const clearAllFilters=()=>{setSelectedTypes(prev=>prev.map(filter=>_objectSpread(_objectSpread({},filter),{},{selected:false})));};const selectAllFilters=()=>{setSelectedTypes(prev=>prev.map(filter=>_objectSpread(_objectSpread({},filter),{},{selected:true})));};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"gallery-view\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"gallery-view\",children:/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"gallery-view\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"gallery-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Pokemon Gallery\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:selectAllFilters,className:\"filter-btn select-all\",children:\"Select All\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearAllFilters,className:\"filter-btn clear-all\",children:\"Clear All\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"type-filters\",children:selectedTypes.map(filter=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleTypeToggle(filter.type),className:\"type-filter \".concat(filter.selected?'active':''),children:filter.type},filter.type))})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"gallery-grid\",children:filteredPokemon.map(pokemon=>/*#__PURE__*/_jsxs(Link,{to:\"/pokemon/\".concat(pokemon.id),className:\"gallery-item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"gallery-image\",children:/*#__PURE__*/_jsx(\"img\",{src:pokemon.sprites.other['official-artwork'].front_default||pokemon.sprites.front_default,alt:pokemon.name,onError:e=>{const target=e.target;target.src=pokemon.sprites.front_default;}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gallery-overlay\",children:[/*#__PURE__*/_jsx(\"h3\",{children:pokemon.name.charAt(0).toUpperCase()+pokemon.name.slice(1)}),/*#__PURE__*/_jsxs(\"p\",{children:[\"#\",pokemon.id.toString().padStart(3,'0')]})]})]},pokemon.id))}),filteredPokemon.length===0&&/*#__PURE__*/_jsxs(\"div\",{className:\"no-results\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"No Pokemon match the selected filters.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearAllFilters,className:\"clear-filters-btn\",children:\"Clear Filters\"})]})]});};export default GalleryView;","map":{"version":3,"names":["React","useState","useEffect","useMemo","Link","pokemonApi","LoadingSpinner","jsx","_jsx","jsxs","_jsxs","GalleryView","pokemonList","setPokemonList","availableTypes","setAvailableTypes","selectedTypes","setSelectedTypes","loading","setLoading","error","setError","fetchPokemon","response","getPokemonList","details","Promise","all","results","map","pokemon","id","url","split","slice","getPokemon","parseInt","types","Set","forEach","type","add","name","sortedTypes","Array","from","sort","selected","err","console","filteredPokemon","activeFilters","filter","length","some","includes","handleTypeToggle","typeName","prev","_objectSpread","clearAllFilters","selectAllFilters","className","children","onClick","concat","to","src","sprites","other","front_default","alt","onError","e","target","charAt","toUpperCase","toString","padStart"],"sources":["/Users/daijingyu/Desktop/mp2/src/components/GalleryView.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Pokemon, FilterOption } from '../types/Pokemon';\nimport { pokemonApi } from '../services/pokemonApi';\nimport LoadingSpinner from './LoadingSpinner';\nimport './GalleryView.css';\n\nconst GalleryView: React.FC = () => {\n  const [pokemonList, setPokemonList] = useState<Pokemon[]>([]);\n  const [availableTypes, setAvailableTypes] = useState<string[]>([]);\n  const [selectedTypes, setSelectedTypes] = useState<FilterOption[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPokemon = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await pokemonApi.getPokemonList(151, 0);\n        \n        // Fetch detailed data for all Pokemon\n        const details = await Promise.all(\n          response.results.map(async (pokemon) => {\n            const id = pokemon.url.split('/').slice(-2, -1)[0];\n            return pokemonApi.getPokemon(parseInt(id));\n          })\n        );\n        setPokemonList(details);\n\n        // Extract unique types for filtering\n        const types = new Set<string>();\n        details.forEach(pokemon => {\n          pokemon.types.forEach(type => {\n            types.add(type.type.name);\n          });\n        });\n        \n        const sortedTypes = Array.from(types).sort();\n        setAvailableTypes(sortedTypes);\n        setSelectedTypes(sortedTypes.map(type => ({ type, selected: false })));\n      } catch (err) {\n        setError('Failed to load Pokemon data');\n        console.error('Error fetching Pokemon:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPokemon();\n  }, []);\n\n  const filteredPokemon = useMemo(() => {\n    const activeFilters = selectedTypes.filter(filter => filter.selected).map(filter => filter.type);\n    \n    if (activeFilters.length === 0) {\n      return pokemonList;\n    }\n\n    return pokemonList.filter(pokemon =>\n      pokemon.types.some(type => activeFilters.includes(type.type.name))\n    );\n  }, [pokemonList, selectedTypes]);\n\n  const handleTypeToggle = (typeName: string) => {\n    setSelectedTypes(prev =>\n      prev.map(filter =>\n        filter.type === typeName\n          ? { ...filter, selected: !filter.selected }\n          : filter\n      )\n    );\n  };\n\n  const clearAllFilters = () => {\n    setSelectedTypes(prev =>\n      prev.map(filter => ({ ...filter, selected: false }))\n    );\n  };\n\n  const selectAllFilters = () => {\n    setSelectedTypes(prev =>\n      prev.map(filter => ({ ...filter, selected: true }))\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"gallery-view\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"gallery-view\">\n        <div className=\"error\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"gallery-view\">\n      <div className=\"gallery-header\">\n        <h2>Pokemon Gallery</h2>\n        <div className=\"filter-controls\">\n          <div className=\"filter-buttons\">\n            <button onClick={selectAllFilters} className=\"filter-btn select-all\">\n              Select All\n            </button>\n            <button onClick={clearAllFilters} className=\"filter-btn clear-all\">\n              Clear All\n            </button>\n          </div>\n          <div className=\"type-filters\">\n            {selectedTypes.map((filter) => (\n              <button\n                key={filter.type}\n                onClick={() => handleTypeToggle(filter.type)}\n                className={`type-filter ${filter.selected ? 'active' : ''}`}\n              >\n                {filter.type}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"gallery-grid\">\n        {filteredPokemon.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemon/${pokemon.id}`} className=\"gallery-item\">\n            <div className=\"gallery-image\">\n              <img\n                src={pokemon.sprites.other['official-artwork'].front_default || pokemon.sprites.front_default}\n                alt={pokemon.name}\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.src = pokemon.sprites.front_default;\n                }}\n              />\n            </div>\n            <div className=\"gallery-overlay\">\n              <h3>{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</h3>\n              <p>#{pokemon.id.toString().padStart(3, '0')}</p>\n            </div>\n          </Link>\n        ))}\n      </div>\n\n      {filteredPokemon.length === 0 && (\n        <div className=\"no-results\">\n          <p>No Pokemon match the selected filters.</p>\n          <button onClick={clearAllFilters} className=\"clear-filters-btn\">\n            Clear Filters\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GalleryView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}