{"ast":null,"code":"import axios from'axios';const BASE_URL='https://pokeapi.co/api/v2';const api=axios.create({baseURL:BASE_URL,timeout:10000});// Cache for Pokemon data to avoid repeated API calls\nconst pokemonCache=new Map();const listCache=new Map();export const pokemonApi={// Get list of Pokemon with pagination\nasync getPokemonList(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:151;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;const cacheKey=\"list-\".concat(limit,\"-\").concat(offset);if(listCache.has(cacheKey)){return listCache.get(cacheKey);}try{const response=await api.get(\"/pokemon?limit=\".concat(limit,\"&offset=\").concat(offset));listCache.set(cacheKey,response.data);return response.data;}catch(error){console.error('Error fetching Pokemon list:',error);throw new Error('Failed to fetch Pokemon list');}},// Get detailed Pokemon data by ID or name\nasync getPokemon(idOrName){const id=typeof idOrName==='string'?parseInt(idOrName):idOrName;if(pokemonCache.has(id)){return pokemonCache.get(id);}try{const response=await api.get(\"/pokemon/\".concat(idOrName));pokemonCache.set(id,response.data);return response.data;}catch(error){console.error(\"Error fetching Pokemon \".concat(idOrName,\":\"),error);throw new Error(\"Failed to fetch Pokemon \".concat(idOrName));}},// Get Pokemon types for filtering\nasync getPokemonTypes(){try{const response=await api.get('/type');return response.data.results;}catch(error){console.error('Error fetching Pokemon types:',error);throw new Error('Failed to fetch Pokemon types');}},// Search Pokemon by name\nasync searchPokemon(query){try{// Get all Pokemon and filter by name\nconst response=await api.get('/pokemon?limit=151&offset=0');return response.data.results.filter(pokemon=>pokemon.name.toLowerCase().includes(query.toLowerCase()));}catch(error){console.error('Error searching Pokemon:',error);throw new Error('Failed to search Pokemon');}}};export default pokemonApi;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","timeout","pokemonCache","Map","listCache","pokemonApi","getPokemonList","limit","arguments","length","undefined","offset","cacheKey","concat","has","get","response","set","data","error","console","Error","getPokemon","idOrName","id","parseInt","getPokemonTypes","results","searchPokemon","query","filter","pokemon","name","toLowerCase","includes"],"sources":["/Users/daijingyu/Desktop/mp2/src/services/pokemonApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { Pokemon, PokemonListResponse, PokemonListItem } from '../types/Pokemon';\n\nconst BASE_URL = 'https://pokeapi.co/api/v2';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n});\n\n// Cache for Pokemon data to avoid repeated API calls\nconst pokemonCache = new Map<number, Pokemon>();\nconst listCache = new Map<string, PokemonListResponse>();\n\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit: number = 151, offset: number = 0): Promise<PokemonListResponse> {\n    const cacheKey = `list-${limit}-${offset}`;\n    \n    if (listCache.has(cacheKey)) {\n      return listCache.get(cacheKey)!;\n    }\n\n    try {\n      const response = await api.get<PokemonListResponse>(`/pokemon?limit=${limit}&offset=${offset}`);\n      listCache.set(cacheKey, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw new Error('Failed to fetch Pokemon list');\n    }\n  },\n\n  // Get detailed Pokemon data by ID or name\n  async getPokemon(idOrName: number | string): Promise<Pokemon> {\n    const id = typeof idOrName === 'string' ? parseInt(idOrName) : idOrName;\n    \n    if (pokemonCache.has(id)) {\n      return pokemonCache.get(id)!;\n    }\n\n    try {\n      const response = await api.get<Pokemon>(`/pokemon/${idOrName}`);\n      pokemonCache.set(id, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${idOrName}:`, error);\n      throw new Error(`Failed to fetch Pokemon ${idOrName}`);\n    }\n  },\n\n  // Get Pokemon types for filtering\n  async getPokemonTypes(): Promise<{ name: string; url: string }[]> {\n    try {\n      const response = await api.get('/type');\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw new Error('Failed to fetch Pokemon types');\n    }\n  },\n\n  // Search Pokemon by name\n  async searchPokemon(query: string): Promise<PokemonListItem[]> {\n    try {\n      // Get all Pokemon and filter by name\n      const response = await api.get<PokemonListResponse>('/pokemon?limit=151&offset=0');\n      return response.data.results.filter(pokemon => \n        pokemon.name.toLowerCase().includes(query.toLowerCase())\n      );\n    } catch (error) {\n      console.error('Error searching Pokemon:', error);\n      throw new Error('Failed to search Pokemon');\n    }\n  }\n};\n\nexport default pokemonApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}